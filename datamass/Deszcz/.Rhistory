load("~/workspaces/python/argo/datasets/datamass/Deszcz/input_data.RData")
View(input_data)
library("datetime")
library("SimDesign")
library("lubridate")
load('~/input_data.RData')
View(input_data)
library("datetime")
install "datetime"
install.packages("datetime")
library("datetime")
new_probe_period<-30
load('~/input_data.RData')
load('input_data.RData')
response_data <- input_data[(
(
((input_data$day>=6 & input_data$day<=10) & input_data$month==4)
)
& input_data$year==2017)
& (input_data$m==30| input_data$m==0),
names(input_data) %in% c('flow','rainfall','timestamp','h','m')]
View(response_data)
resp_length <- length(response_data[,1])
### RAINFALL RECALC FOR NEW PROBING PERIOD ###
for(i in 1:resp_length){
v<-response_data[i,]
filtered<-input_data[(input_data$timestamp > v$timestamp - new_probe_period)
& (input_data$timestamp <= v$timestamp),]
response_data[i,]$rainfall <- sum(filtered$rainfall)
}
plot_data <- response_data[,names(response_data) %in% c("timestamp","flow","rainfall")]
plot(plot_data$timestamp,plot_data$flow,type="l",axes=FALSE,xlab="", ylab="", col="blue")
axis(2,at=plot_data$flow, las=0)
axis(1, at=plot_data$timestamp,labels=format.datetime(plot_data$timestamp,"%Y-%m-%d %H:%M"), las=0)
par(new=TRUE)
plot(plot_data$timestamp,plot_data$rainfall,type="l",axes=FALSE,xlab="", ylab="",col="gray")
axis(4,at=plot_data$rainfall, las=0)
library("datetime")
library("anytime")
install.packages(c("anytime", "lubridate"))
library("anytime")
library("lubridate")
load('~/input_data.RData')
load('input_data.RData')
View(input_data)
get_daily_flow_model <-function(endd_string){
day<-NULL;
# days<-c(1,2,6,7,6,22)
# months<-c(7,7,7,7,9,6)
start = as.POSIXct("2015-06-02 0:00:00")
endd = as.POSIXct(endd_string)#"2018-02-27 0:00:00"
days <- seq(from=start,to=endd,by="1 DSTday")
for(i in 1:length(days)){
start<-days[i]
start_ts <- as.numeric(start)
end <- seq(from=start,by="1 day", length=2)[2]
end_ts <- as.numeric(end)
tmp_day <- input_data[
(input_data$timestamp>=start_ts & input_data$timestamp<end_ts)
& (input_data$m==30 | input_data$m==0)
, names(input_data) %in% c('flow','rainfall','timestamp','h','m')]
### korekta DST
if(dst(force_tz(start,"US/Eastern"))){
tmp_day$flow <- c(tail(tmp_day$flow,-2),head(tmp_day$flow,2))
}
###
if(max(tmp_day$rainfall)==0)
day <- c(day,list(tmp_day));
}
ideal_day<-day[[1]]
n <- 0
for(i in 2:length(day)){
list <- day[[i]]
if(length(list$flow)==length(ideal_day$flow)){
ideal_day$flow <- ideal_day$flow + list$flow
n <- n+1
}
}
ideal_day$flow<-ideal_day$flow / n;
###
return(ideal_day);
}
library("datetime")
new_probe_period<-30
load('rain_day.RData')
load('input_data.RData')
lambda <- 0.9
output_vector_length <- 2
input_vector_length <- 2
data_length <- output_vector_length+input_vector_length
### Clean model ###
params <- rep.int(0.1,data_length)
P <- diag(data_length)
### DATA ###
response_data <- rain_day;
output_vector <-rep.int(0,output_vector_length);
# -rev(response_data$flow[1:output_vector_length])
input_vector <- rev(response_data$rainfall[1:input_vector_length])
resp_length <- length(response_data[,1])
response_data[7] <- rep.int(0,resp_length);
response_data[8] <- rep.int(0,resp_length);
colnames(response_data)[7] <-'predicted_response'
colnames(response_data)[8] <-'prediction_error'
library("datetime")
library("SimDesign")
install.packages("SimDesign")
